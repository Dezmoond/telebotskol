import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

from bot.keyboards import get_start_keyboard, get_main_menu_keyboard, get_block_menu_keyboard
from bot.states import LessonStates
from config import MESSAGES

router = Router()


@router.message(CommandStart())
@router.message(Command("help"))
async def start_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help"""
    await message.answer(
        f"{MESSAGES['welcome']}\n\n"
        "üéØ **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:** –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤, Data Science –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π\n\n"
        "**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Ä–æ–∫–∞:**\n"
        "1. üìñ –ò–∑—É—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤\n"
        "2. üó£Ô∏è –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ\n"
        "3. üìù –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
        "4. üìö –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ —Å AI-—É—á–∏—Ç–µ–ª–µ–º\n"
        "5. ‚úèÔ∏è –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
        "6. üéß –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "7. ‚úçÔ∏è –ü–∏—Å—å–º–æ\n"
        "8. üí¨ –ì–æ–≤–æ—Ä–µ–Ω–∏–µ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=get_main_menu_keyboard()
    )


@router.message(Command("lesson"))
async def lesson_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞"""
    await message.answer(MESSAGES["start_lesson"])
    await state.set_state(LessonStates.TERMS_START)

    from bot.handlers.lesson import start_terms_block
    await start_terms_block(message, state)


@router.message(Command("restart"))
async def restart_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —É—Ä–æ–∫–∞"""
    await state.clear()
    from bot.utils import user_progress
    user_progress.reset_progress(message.from_user.id)

    await message.answer(
        "üîÑ –£—Ä–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )


@router.message(Command("listening"))
async def listening_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–ª–æ–∫–∞ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await message.answer("üéß –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    from bot.handlers.lesson import start_listening_true_false
    await start_listening_true_false(message, state)


@router.message(Command("terms"))
async def terms_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–ª–æ–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤"""
    await message.answer("üìñ –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –∏–∑—É—á–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤...")
    from bot.handlers.lesson import start_terms_block
    await start_terms_block(message, state)


@router.callback_query(F.data == "start_lesson")
async def start_lesson(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É—Ä–æ–∫–∞"""
    await callback.message.edit_text(
        MESSAGES["start_lesson"]
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –±–ª–æ–∫—É —Ç–µ—Ä–º–∏–Ω–æ–≤
    await state.set_state(LessonStates.TERMS_START)

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤
    from bot.handlers.lesson import start_terms_block
    await start_terms_block(callback.message, state)

    await callback.answer()


@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        f"{MESSAGES['welcome']}\n\n"
        "üéØ **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:** –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤, Data Science –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "restart_lesson")
async def restart_lesson(callback: CallbackQuery, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
    await state.clear()
    from bot.utils import user_progress
    user_progress.reset_progress(callback.from_user.id)

    try:
        await callback.message.edit_text(
            "üîÑ –£—Ä–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.message.answer(
            "üîÑ –£—Ä–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )

    await callback.answer()


@router.callback_query(F.data == "continue_lesson")
async def continue_lesson(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Ä–æ–∫ —Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–∞"""
    from bot.utils import user_progress

    progress = user_progress.get_progress(callback.from_user.id)
    current_block = progress.get('current_block', 'terms')

    if current_block == 'terms':
        await callback.message.edit_text("üìñ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–∑—É—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤...")
        from bot.handlers.lesson import start_terms_block
        await start_terms_block(callback.message, state)

    elif current_block == 'pronunciation':
        await callback.message.edit_text("üó£Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–ª–æ–∫ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è...")
        from bot.handlers.lesson import start_pronunciation_block
        await start_pronunciation_block(callback.message, state)

    elif current_block == 'lexical':
        await callback.message.edit_text("üìù –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è...")
        from bot.handlers.lesson import start_lexical_en_to_ru_block
        await start_lexical_en_to_ru_block(callback.message, state)

    elif current_block == 'grammar':
        await callback.message.edit_text("üìö –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–∑—É—á–µ–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏...")
        from bot.handlers.lesson import start_grammar_block
        await start_grammar_block(callback.message, state)

    elif current_block == 'lexico_grammar':
        await callback.message.edit_text("‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è...")
        from bot.handlers.lesson import start_verb_exercise
        await start_verb_exercise(callback.message, state)

    elif current_block == 'listening':
        await callback.message.edit_text("üéß –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–ª–æ–∫ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è...")
        from bot.handlers.lesson import start_listening_true_false
        await start_listening_true_false(callback.message, state)

    elif current_block == 'writing':
        await callback.message.edit_text("‚úçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–ª–æ–∫ –ø–∏—Å—å–º–µ–Ω–Ω–æ–π —Ä–µ—á–∏...")
        from bot.handlers.lesson import start_writing_sentences
        await start_writing_sentences(callback.message, state)

    else:
        await callback.message.edit_text(
            "üéâ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–ª–æ–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!\n\n"
            "–û—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ (–≥–æ–≤–æ—Ä–µ–Ω–∏–µ) –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            reply_markup=get_main_menu_keyboard()
        )

    await callback.answer()


@router.message(Command("writing"))
async def writing_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–ª–æ–∫–∞ –ø–∏—Å—å–º–∞"""
    await message.answer("‚úçÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –ø–∏—Å—å–º–µ–Ω–Ω–æ–π —Ä–µ—á–∏...")
    from bot.handlers.lesson import start_writing_sentences
    await start_writing_sentences(message, state)


@router.callback_query(F.data.startswith("menu_"))
async def handle_menu_navigation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é"""
    # --- –ü–ï–†–í–´–ú –î–ï–õ–û–ú –û–¢–í–ï–ß–ê–ï–ú –ù–ê CALLBACK QUERY ---
    await callback.answer()
    # --- –≠–¢–û –ö–†–ò–¢–ò–ß–ù–û! ---

    menu_type = callback.data.replace("menu_", "")

    if menu_type == "terms":
        await callback.message.edit_text(
            "üìñ **–ë–ª–æ–∫: –ò–∑—É—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤**\n\n"
            "–í —ç—Ç–æ–º –±–ª–æ–∫–µ –≤—ã –∏–∑—É—á–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ Data Science —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º.",
            parse_mode="Markdown",
            reply_markup=get_block_menu_keyboard()
        )
        # –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–ª–æ–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤
        from bot.handlers.lesson import start_terms_block
        await start_terms_block(callback.message, state)

    elif menu_type == "pronunciation":
        await callback.message.edit_text(
            "üó£Ô∏è **–ë–ª–æ–∫: –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ**\n\n"
            "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è IT —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏.",
            parse_mode="Markdown",
            reply_markup=get_block_menu_keyboard()
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
        from bot.handlers.lesson import start_pronunciation_block
        await start_pronunciation_block(callback.message, state)

    elif menu_type == "speaking":
        await callback.message.edit_text(
            "üí¨ **–ë–ª–æ–∫: –ì–æ–≤–æ—Ä–µ–Ω–∏–µ**\n\n"
            "–§–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫ –∫—É—Ä—Å–∞ - —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤ —É—Å—Ç–Ω–æ–π —Ä–µ—á–∏ –Ω–∞ IT —Ç–µ–º—ã.",
            parse_mode="Markdown"
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –≥–æ–≤–æ—Ä–µ–Ω–∏—è
        from bot.handlers.lesson import start_speaking_block
        await start_speaking_block(callback.message, state)

    elif menu_type == "lexical":
        await callback.message.edit_text(
            "üìù **–ë–ª–æ–∫: –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è**\n\n"
            "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã.",
            parse_mode="Markdown",
            reply_markup=get_block_menu_keyboard()
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫
        from bot.handlers.lesson import start_lexical_en_to_ru_block
        await start_lexical_en_to_ru_block(callback.message, state)

    elif menu_type == "grammar":
        await callback.message.edit_text(
            "üìö **–ë–ª–æ–∫: –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞**\n\n"
            "–ò–∑—É—á–µ–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –º–∏—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.",
            parse_mode="Markdown",
            reply_markup=get_block_menu_keyboard()
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
        from bot.handlers.lesson import start_grammar_block
        await start_grammar_block(callback.message, state)

    elif menu_type == "exercises":
        await callback.message.edit_text(
            "‚úèÔ∏è **–ë–ª–æ–∫: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è**\n\n"
            "–õ–µ–∫—Å–∏–∫–æ-–≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ IT —Ç–µ–º–∞—Ç–∏–∫—É.",
            parse_mode="Markdown",
            reply_markup=get_block_menu_keyboard()
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        from bot.handlers.lesson import start_verb_exercise
        await start_verb_exercise(callback.message, state)

    elif menu_type == "listening":
        await callback.message.edit_text(
            "üéß **–ë–ª–æ–∫: –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ**\n\n"
            "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–∞ —Å–ª—É—Ö —Å IT —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–µ–π.",
            parse_mode="Markdown"
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        from bot.handlers.lesson import start_listening_true_false
        await start_listening_true_false(callback.message, state)

    elif menu_type == "writing":
        await callback.message.edit_text(
            "‚úçÔ∏è **–ë–ª–æ–∫: –ü–∏—Å—å–º–µ–Ω–Ω–∞—è —Ä–µ—á—å**\n\n"
            "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–≤–æ–¥ —Å IT —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–µ–π.",
            parse_mode="Markdown"
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –ø–∏—Å—å–º–∞
        from bot.handlers.lesson import start_writing_sentences
        await start_writing_sentences(callback.message, state)