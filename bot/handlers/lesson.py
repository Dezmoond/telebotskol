import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from bot.keyboards import (get_next_keyboard, get_pronunciation_keyboard, get_pronunciation_result_keyboard, 
                         get_choice_keyboard, get_continue_keyboard, get_grammar_keyboard, get_grammar_qa_keyboard,
                         get_mchoice_keyboard, get_text_exercise_keyboard, get_true_false_keyboard, 
                         get_listening_choice_keyboard, get_listening_phrases_keyboard, get_phrase_result_keyboard,
                         get_main_menu_keyboard, get_continue_writing_keyboard, get_writing_skip_keyboard,
                         get_speaking_keyboard, get_speaking_result_keyboard, get_final_keyboard, get_word_build_keyboard)
from bot.states import LessonStates
from bot.utils import (load_json_data, generate_audio, user_progress, simple_pronunciation_check, 
                      get_teacher_response, check_writing_with_ai, analyze_speaking_with_ai, transcribe_audio_simple)
from config import MESSAGES, IMAGES_PATH
from config import OPENAI_API_KEY 
from bot.utils import convert_ogg_to_wav

router = Router()



def get_keyboard_with_menu(original_keyboard):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∫ –ª—é–±–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π
    keyboard = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if hasattr(original_keyboard, 'inline_keyboard'):
        for row in original_keyboard.inline_keyboard:
            for button in row:
                keyboard.button(text=button.text, callback_data=button.callback_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    # keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    # keyboard.button(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", callback_data="restart_lesson")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    keyboard.adjust(1, 1, 2)  # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–µ—Ü, –º–µ–Ω—é –≤ —Å—Ç—Ä–æ–∫—É
    return keyboard.as_markup()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.callback_query(F.data == "main_menu")
async def handle_main_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    await callback.message.edit_text(
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "üéØ **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:** –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤, Data Science –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "restart_lesson")
async def handle_restart_lesson(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Ä–æ–∫–∞ –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
    await state.clear()
    user_progress.reset_progress(callback.from_user.id)
    
    try:
        await callback.message.edit_text(
            "üîÑ –£—Ä–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.message.answer(
            "üîÑ –£—Ä–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer()
    
async def start_terms_block(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –∏–∑—É—á–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω–æ–≤
    terms_data = await load_json_data("1_terms.json")
    if not terms_data or "terms" not in terms_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(terms=terms_data["terms"], current_term=0)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(MESSAGES["terms_intro"])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ—Ä–º–∏–Ω
    await show_current_term(message, state)


async def show_current_term(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ—Ä–º–∏–Ω (–ø–æ—ç—Ç–∞–ø–Ω–æ)"""
    data = await state.get_data()
    terms = data.get("terms", [])
    current_index = data.get("current_term", 0)
    
    if current_index >= len(terms):
        # –í—Å–µ —Ç–µ—Ä–º–∏–Ω—ã –∏–∑—É—á–µ–Ω—ã
        await message.answer(
            MESSAGES["terms_complete"],
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        await state.set_state(LessonStates.TERMS_COMPLETE)
        return
    
    current_term = terms[current_index]
    
    # –≠—Ç–∞–ø 1: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω
    await message.answer(
        f"üìù **–¢–µ—Ä–º–∏–Ω:** {current_term['english']}",
        parse_mode="Markdown"
    )
    
    # –≠—Ç–∞–ø 2: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
    await message.answer(
        f"üá∑üá∫ **–ü–µ—Ä–µ–≤–æ–¥:** {current_term['russian']}",
        parse_mode="Markdown"
    )
    
    # –≠—Ç–∞–ø 3: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
    await message.answer(
        f"üî§ **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:** {current_term['transcription']}",
        parse_mode="Markdown"
    )
    
    # –≠—Ç–∞–ø 4: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    image_path = os.path.join(IMAGES_PATH, current_term.get("image", ""))
    if os.path.exists(image_path):
        try:
            photo = FSInputFile(image_path)
            await message.answer_photo(photo)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await message.answer("–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    else:
        await message.answer("–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    
    # –≠—Ç–∞–ø 5: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
    audio_filename = f"term_{current_index}_{current_term['english'].replace(' ', '_')}"
    audio_path = await generate_audio(current_term['english'], audio_filename, 'en')
    
    if audio_path and os.path.exists(audio_path):
        try:
            audio = FSInputFile(audio_path)
            await message.answer_audio(
                audio, 
                caption="üîä **–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ**",
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
            await message.answer("üîä **–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ:** (–∞—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")
    else:
        await message.answer("üîä **–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ:** (–∞—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")
    
    # –ö–Ω–æ–ø–∫–∞ "–î–∞–ª—å—à–µ" —Å –º–µ–Ω—é
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–î–∞–ª—å—à–µ¬ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è",
        reply_markup=get_keyboard_with_menu(get_next_keyboard())
    )
    
    await state.set_state(LessonStates.TERMS_SHOW_AUDIO)


@router.callback_query(F.data == "next", LessonStates.TERMS_SHOW_AUDIO)
async def next_term(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Ä–º–∏–Ω—É"""
    data = await state.get_data()
    current_index = data.get("current_term", 0)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞
    await state.update_data(current_term=current_index + 1)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_progress.update_progress(
        callback.from_user.id, 
        current_item=current_index + 1
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ—Ä–º–∏–Ω
    await show_current_term(callback.message, state)
    await callback.answer()


@router.callback_query(F.data == "next", LessonStates.TERMS_COMPLETE)
async def terms_complete_next(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—é"""
    await callback.message.edit_text(
        "üéâ –ë–ª–æ–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –±–ª–æ–∫—É –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è..."
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    user_progress.update_progress(
        callback.from_user.id,
        current_block="pronunciation",
        current_item=0
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
    await start_pronunciation_block(callback.message, state)
    await callback.answer()

async def start_pronunciation_block(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
    pronunciation_data = await load_json_data("2_pronouncing_words.json")
    if not pronunciation_data or "words" not in pronunciation_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        pronunciation_words=pronunciation_data["words"], 
        current_pronunciation_word=0
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(MESSAGES["pronunciation_intro"])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
    await show_pronunciation_word(message, state)


async def show_pronunciation_word(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è"""
    data = await state.get_data()
    words = data.get("pronunciation_words", [])
    current_index = data.get("current_pronunciation_word", 0)
    
    if current_index >= len(words):
        # –í—Å–µ —Å–ª–æ–≤–∞ –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω—ã
        await message.answer(
            MESSAGES["pronunciation_complete"],
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        await state.set_state(LessonStates.PRONUNCIATION_COMPLETE)
        return
    
    current_word = words[current_index]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ
    await message.answer(
        f"üìù **–°–ª–æ–≤–æ:** {current_word['english']}\n"
        f"üá∑üá∫ **–ü–µ—Ä–µ–≤–æ–¥:** {current_word['russian']}\n"
        f"üî§ **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:** {current_word['transcription']}",
        parse_mode="Markdown"
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
    audio_filename = f"pronunciation_{current_index}_{current_word['english'].replace(' ', '_')}"
    audio_path = await generate_audio(current_word['english'], audio_filename, 'en')
    
    if audio_path and os.path.exists(audio_path):
        try:
            audio = FSInputFile(audio_path)
            await message.answer_audio(
                audio, 
                caption="üîä **–ü–æ—Å–ª—É—à–∞–π—Ç–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ**",
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–µ–Ω—é
    await message.answer(
        MESSAGES["pronunciation_instruction"],
        reply_markup=get_keyboard_with_menu(get_pronunciation_keyboard())
    )
    
    await state.set_state(LessonStates.PRONUNCIATION_LISTEN)


@router.callback_query(F.data == "record_pronunciation", LessonStates.PRONUNCIATION_LISTEN)
async def request_pronunciation_recording(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "üé§ –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º —Å–ª–æ–≤–∞.\n\n"
        "–î–ª—è –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤ Telegram –∏ –ø—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ —Å–ª–æ–≤–æ.",
        reply_markup=get_keyboard_with_menu(get_pronunciation_keyboard())
    )
    
    await state.set_state(LessonStates.PRONUNCIATION_RECORD)
    await callback.answer()


@router.message(F.voice, LessonStates.PRONUNCIATION_RECORD)
async def process_pronunciation_recording(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è"""
    data = await state.get_data()
    words = data.get("pronunciation_words", [])
    current_index = data.get("current_pronunciation_word", 0)

    if current_index >= len(words):
        return

    current_word = words[current_index]
    processing_msg = await message.answer("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ...")

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_file = await message.bot.get_file(message.voice.file_id)
        voice_path_ogg = f"media/audio/voice_{message.from_user.id}_{current_index}.ogg"
        voice_path_wav = voice_path_ogg.replace(".ogg", ".wav")

        await message.bot.download_file(voice_file.file_path, voice_path_ogg)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ .wav 16kHz
        if not await convert_ogg_to_wav(voice_path_ogg, voice_path_wav):
            await processing_msg.delete()
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ
        accuracy = await simple_pronunciation_check(current_word['english'], voice_path_wav)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        os.remove(voice_path_ogg)
        if os.path.exists(voice_path_wav):
            os.remove(voice_path_wav)

        await processing_msg.delete()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        if accuracy >= 80:
            feedback = "üéâ –û—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ!"
        elif accuracy >= 50:
            feedback = "üëç –•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ."
        else:
            feedback = "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏."

        await message.answer(
            f"{feedback}\n\nüéØ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%",
            reply_markup=get_keyboard_with_menu(get_pronunciation_result_keyboard())
        )

    except Exception as e:
        await processing_msg.delete()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        print(f"–û—à–∏–±–∫–∞: {e}")


@router.callback_query(F.data == "skip_pronunciation", LessonStates.PRONUNCIATION_LISTEN)
@router.callback_query(F.data == "skip_pronunciation", LessonStates.PRONUNCIATION_RECORD)
@router.callback_query(F.data == "next_pronunciation")
async def next_pronunciation_word(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è"""
    data = await state.get_data()
    current_index = data.get("current_pronunciation_word", 0)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
    await state.update_data(current_pronunciation_word=current_index + 1)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_progress.update_progress(
        callback.from_user.id, 
        current_item=current_index + 1
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
    await show_pronunciation_word(callback.message, state)
    await callback.answer()


@router.callback_query(F.data == "retry_pronunciation")
async def retry_pronunciation(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "üé§ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º —Å–ª–æ–≤–∞.",
        reply_markup=get_keyboard_with_menu(get_pronunciation_keyboard())
    )
    
    await state.set_state(LessonStates.PRONUNCIATION_RECORD)
    await callback.answer()


@router.callback_query(F.data == "next", LessonStates.PRONUNCIATION_COMPLETE)
async def pronunciation_complete_next(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ª–µ–∫—Å–∏–∫–µ"""
    await callback.message.edit_text(
        "üéâ –ë–ª–æ–∫ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º..."
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    user_progress.update_progress(
        callback.from_user.id,
        current_block="lexical",
        current_item=0
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π)
    await start_lexical_en_to_ru_block(callback.message, state)
    await callback.answer()

async def start_lexical_en_to_ru_block(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ª–µ–∫—Å–∏—á–µ—Å–∫–æ–≥–æ –±–ª–æ–∫–∞: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    lexical_data = await load_json_data("translation_questions.json")
    if not lexical_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–µ–∫—Å–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫
    questions = []
    for word, data in lexical_data.items():
        questions.append({
            "word": word,
            "correct": data["correct"],
            "options": data["options"]
        })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        lexical_en_ru=questions,
        current_lexical_en=0,
        lexical_score=0
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(MESSAGES["lexical_intro"])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await show_lexical_en_question(message, state)


async def show_lexical_en_question(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π"""
    data = await state.get_data()
    questions = data.get("lexical_en_ru", [])
    current_index = data.get("current_lexical_en", 0)
    
    if current_index >= len(questions):
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã
        score = data.get("lexical_score", 0)
        await message.answer(
            f"{MESSAGES['lexical_en_ru_complete']}\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(questions)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        await state.set_state(LessonStates.LEXICAL_EN_COMPLETE)
        return
    
    current_question = questions[current_index]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    question_text = f"üìù **–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ ({current_index + 1}/{len(questions)}):**\n\n**{current_question['word']}**"
    
    await message.answer(
        question_text,
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_choice_keyboard(current_question['options'], str(current_index)))
    )
    
    await state.set_state(LessonStates.LEXICAL_EN_TO_RU)


@router.callback_query(F.data.startswith("lexical_"), LessonStates.LEXICAL_EN_TO_RU)
async def process_lexical_en_answer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π"""
    data = await state.get_data()
    questions = data.get("lexical_en_ru", [])
    current_index = data.get("current_lexical_en", 0)
    score = data.get("lexical_score", 0)
    
    if current_index >= len(questions):
        return
    
    current_question = questions[current_index]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ callback_data
    callback_parts = callback.data.split("_", 2)
    if len(callback_parts) >= 3:
        selected_answer = callback_parts[2]
    else:
        selected_answer = ""
    
    correct_answer = current_question["correct"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if selected_answer == correct_answer:
        response_text = MESSAGES["correct_answer"]
        score += 1
        await state.update_data(lexical_score=score)
    else:
        response_text = f"{MESSAGES['wrong_answer']}{correct_answer}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await callback.message.edit_text(
        f"**{current_question['word']}** ‚Üí **{correct_answer}**\n\n{response_text}",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_continue_keyboard())
    )
    
    await callback.answer()


@router.callback_query(F.data == "continue_lexical", LessonStates.LEXICAL_EN_TO_RU)
async def continue_lexical_en_to_ru(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π"""
    
    # üîç DEBUG: –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—É
    print("[DEBUG] –ó–∞–ø—É—â–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ continue_lexical_en_to_ru")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # üîç DEBUG: –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    print("[DEBUG] –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ state:", data)
    
    current_index = data.get("current_lexical_en", 0)
    
    # üîç DEBUG: –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    print(f"[DEBUG] –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞: {current_index}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
    new_index = current_index + 1
    await state.update_data(current_lexical_en=new_index)
    
    # üîç DEBUG: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
    print(f"[DEBUG] –ò–Ω–¥–µ–∫—Å —É–≤–µ–ª–∏—á–µ–Ω. –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {new_index}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    try:
        await show_lexical_en_question(callback.message, state)
        print("[DEBUG] –§—É–Ω–∫—Ü–∏—è show_lexical_en_question —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–Ω–∞")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ show_lexical_en_question: {e}")
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer()


@router.callback_query(F.data == "next", LessonStates.LEXICAL_EN_COMPLETE)
async def lexical_en_complete_next(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ä—É—Å—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É..."
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ —Ä—É—Å—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    await start_lexical_ru_to_en_block(callback.message, state)
    await callback.answer()

async def start_lexical_ru_to_en_block(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ª–µ–∫—Å–∏—á–µ—Å–∫–æ–≥–æ –±–ª–æ–∫–∞: —Ä—É—Å—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    lexical_data = await load_json_data("translation_questions_russian.json")
    if not lexical_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–µ–∫—Å–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (—Ä—É—Å—Å–∫–∏–π)")
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫
    questions = []
    for word, data in lexical_data.items():
        questions.append({
            "word": word,
            "correct": data["correct"],
            "options": data["options"]
        })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        lexical_ru_en=questions,
        current_lexical_ru=0,
        lexical_ru_score=0
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(MESSAGES["lexical_intro"])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await show_lexical_ru_question(message, state)


async def show_lexical_ru_question(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ä—É—Å—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
    data = await state.get_data()
    questions = data.get("lexical_ru_en", [])
    current_index = data.get("current_lexical_ru", 0)
    
    if current_index >= len(questions):
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã
        score = data.get("lexical_ru_score", 0)
        await message.answer(
            f"{MESSAGES['lexical_ru_en_complete']}\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(questions)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        await state.set_state(LessonStates.LEXICAL_RU_COMPLETE)
        return
    
    current_question = questions[current_index]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    question_text = f"üìù **–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ ({current_index + 1}/{len(questions)}):**\n\n**{current_question['word']}**"
    
    await message.answer(
        question_text,
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_choice_keyboard(current_question['options'], f"ru_{current_index}"))
    )
    
    await state.set_state(LessonStates.LEXICAL_RU_TO_EN)


@router.callback_query(F.data.startswith("lexical_"), LessonStates.LEXICAL_RU_TO_EN)
async def process_lexical_ru_answer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
    data = await state.get_data()
    questions = data.get("lexical_ru_en", [])
    current_index = data.get("current_lexical_ru", 0)
    score = data.get("lexical_ru_score", 0)
    
    if current_index >= len(questions):
        return
    
    current_question = questions[current_index]
    
 # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ callback_data
    callback_parts = callback.data.split("_")
    if len(callback_parts) >= 4:
        selected_answer = callback_parts[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
    else:
        selected_answer = ""
        
    correct_answer = current_question["correct"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if selected_answer == correct_answer:
        response_text = MESSAGES["correct_answer"]
        score += 1
        await state.update_data(lexical_ru_score=score)
    else:
        response_text = f"{MESSAGES['wrong_answer']}{correct_answer}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await callback.message.edit_text(
        f"**{current_question['word']}** ‚Üí **{correct_answer}**\n\n{response_text}",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_continue_keyboard())
    )
    
    await callback.answer()


@router.callback_query(F.data == "continue_lexical", LessonStates.LEXICAL_RU_TO_EN)
async def continue_lexical_ru_to_en(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä—É—Å—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
    data = await state.get_data()
    current_index = data.get("current_lexical_ru", 0)
    await state.update_data(current_lexical_ru=current_index + 1)
    
    await show_lexical_ru_question(callback.message, state)
    await callback.answer()


@router.callback_query(F.data == "next", LessonStates.LEXICAL_RU_COMPLETE)
async def lexical_complete_next(callback: CallbackQuery, state: FSMContext):
    """–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ-–∏–≥—Ä–∞ (–≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è)"""
    await callback.message.edit_text(
        "üéâ –ï—â–µ –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
        "–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–±—Ä–∞—Ç—å —Å–ª–æ–≤–∞ –∏–∑ —á–∞—Å—Ç–µ–π."
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    user_progress.update_progress(
        callback.from_user.id,
        current_block="lexical",
        current_item=0
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ —Å–±–æ—Ä–∫—É —Å–ª–æ–≤
    await start_word_build(callback, state)
    
    await callback.answer()


# --- –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: –°–±–æ—Ä–∫–∞ —Å–ª–æ–≤–∞ –∏–∑ —á–∞—Å—Ç–µ–π ---

async def start_word_build(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Å–±–æ—Ä–∫—É —Å–ª–æ–≤"""
    data = await load_json_data("word_build.json")
    if not data:
        await callback.message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return

    words = list(data.keys())
    await state.update_data(
        word_build_data=data,
        word_build_words=words,
        current_word_index=0,
        word_build_collected="",
        word_build_score=0
    )

    await show_word_build_exercise(callback.message, state)
    await callback.answer()


async def show_word_build_exercise(message: Message, state: FSMContext):
    data = await state.get_data()
    words = data.get("word_build_words", [])
    index = data.get("current_word_index", 0)
    all_data = data.get("word_build_data", {})

    if index >= len(words):
        await finish_word_build(message, state)
        return

    word = words[index]
    parts = all_data[word]["scrambled_parts"]
    collected = data.get("word_build_collected", "")

    placeholder = " ".join(["_" * len(part) for part in all_data[word]["parts"]])
    user_input = " + ".join(collected.split("+")) if collected else ""

    text = (
        f"üî§ –°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ –∏–∑ —á–∞—Å—Ç–µ–π:\n\n"
        f"{placeholder}\n\n"
        f"–¢—ã —Å–æ–±—Ä–∞–ª: {user_input or '–Ω–∏—á–µ–≥–æ'}\n\n"
        f"–í—ã–±–µ—Ä–∏ —á–∞—Å—Ç–∏:"
    )

    await message.edit_text(text, reply_markup=get_word_build_keyboard(parts, collected))
    await state.set_state(LessonStates.LEXICAL_WORD_BUILD)


async def finish_word_build(message: Message, state: FSMContext):
    data = await state.get_data()
    total = len(data.get("word_build_words", []))
    score = data.get("word_build_score", 0)

    result_text = (
        f"üéâ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
        f"–í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–±—Ä–∞–ª–∏ {score} –∏–∑ {total} —Å–ª–æ–≤."
    )

    await message.edit_text(result_text, reply_markup=get_keyboard_with_menu(get_next_keyboard()))
    await state.set_state(LessonStates.LEXICAL_WORD_COMPLETE)


@router.callback_query(F.data.startswith("wb_part_"))
async def handle_word_part(callback: CallbackQuery, state: FSMContext):
    part = callback.data.replace("wb_part_", "")
    data = await state.get_data()
    collected = data.get("word_build_collected", "")
    collected += "+" + part if collected else part
    await state.update_data(word_build_collected=collected)
    await show_word_build_exercise(callback.message, state)
    await callback.answer()


@router.callback_query(F.data == "wb_check")
async def check_word_build(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    words = data.get("word_build_words", [])
    index = data.get("current_word_index", 0)
    all_data = data.get("word_build_data", {})
    collected = data.get("word_build_collected", "")

    word = words[index]
    correct_parts = all_data[word]["parts"]
    user_parts = collected.split("+")

    if user_parts == correct_parts:
        score = data.get("word_build_score", 0) + 1
        await state.update_data(word_build_score=score)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
        await callback.message.edit_text(
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n"
            f"–í—ã —Å–æ–±—Ä–∞–ª–∏: {' + '.join(correct_parts)}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ ¬´‚û°Ô∏è –î–∞–ª–µ–µ¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="wb_next")]
            ])
        )
    else:
        correct = " + ".join(correct_parts)
        await callback.message.edit_text(
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ ¬´‚û°Ô∏è –î–∞–ª–µ–µ¬ª.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="wb_next")]
            ])
        )


@router.callback_query(F.data == "wb_next")
async def next_word_after_check(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    index = data.get("current_word_index", 0)

    await state.update_data(
        current_word_index=index + 1,
        word_build_collected=""
    )

    await show_word_build_exercise_new(callback.message, state)
    await callback.answer()
    
@router.callback_query(F.data == "wb_skip")
async def skip_word_build(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    index = data.get("current_word_index", 0)

    await state.update_data(
        current_word_index=index + 1,
        word_build_collected=""
    )

    await show_word_build_exercise_new(callback.message, state)
    await callback.answer()

async def show_word_build_exercise_new(message: Message, state: FSMContext):
    data = await state.get_data()
    words = data.get("word_build_words", [])
    index = data.get("current_word_index", 0)
    all_data = data.get("word_build_data", {})

    if index >= len(words):
        await finish_word_build(message, state)
        return

    word = words[index]
    parts = all_data[word]["scrambled_parts"]
    collected = data.get("word_build_collected", "")

    placeholder = " ".join(["_" * len(part) for part in all_data[word]["parts"]])
    user_input = " + ".join(collected.split("+")) if collected else ""

    text = (
        f"üî§ –°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ –∏–∑ —á–∞—Å—Ç–µ–π:\n\n"
        f"{placeholder}\n\n"
        f"–¢—ã —Å–æ–±—Ä–∞–ª: {user_input or '–Ω–∏—á–µ–≥–æ'}\n\n"
        f"–í—ã–±–µ—Ä–∏ —á–∞—Å—Ç–∏:"
    )
    
    await message.answer(text, reply_markup=get_word_build_keyboard(parts, collected))

@router.callback_query(F.data == "next", LessonStates.LEXICAL_WORD_COMPLETE)
async def word_build_complete_next(callback: CallbackQuery, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ!)
    await callback.message.answer("üî§ –°–ª–æ–≤–æ —Å–æ–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
                                  "üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n"
                                  "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–∑—É—á–µ–Ω–∏—é –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏.")
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ
    await start_grammar_block(callback.message, state)
    
    await callback.answer()

# --- –ö–æ–Ω–µ—Ü —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –°–±–æ—Ä–∫–∞ —Å–ª–æ–≤–∞ ---

async def start_grammar_block(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–ª–æ–∫–∞"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(MESSAGES["grammar_intro"])
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ
    grammar_data = await load_json_data("present_simple.json")
    if not grammar_data or "rule" not in grammar_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(grammar_rule=grammar_data["rule"])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–æ
    await message.answer(
        f"üìö **–ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ:**\n\n{grammar_data['rule']}",
        parse_mode="Markdown"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å –º–µ–Ω—é
    await message.answer(
        "–ö–∞–∫ –¥–µ–ª–∞ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º?",
        reply_markup=get_keyboard_with_menu(get_grammar_keyboard())
    )
    
    await state.set_state(LessonStates.GRAMMAR_CHOICE)


@router.callback_query(F.data == "grammar_understood", LessonStates.GRAMMAR_CHOICE)
async def grammar_understood(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–Ω—è–ª –≥—Ä–∞–º–º–∞—Ç–∏–∫—É"""
    await callback.message.edit_text(
        "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–Ω—è–ª–∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ!\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É...",
        reply_markup=get_keyboard_with_menu(get_next_keyboard())
    )
    
    await state.set_state(LessonStates.GRAMMAR_COMPLETE)
    await callback.answer()


@router.callback_query(F.data == "grammar_questions", LessonStates.GRAMMAR_CHOICE)
async def grammar_questions(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã"""
    await callback.message.edit_text(
        MESSAGES["grammar_ask_question"],
        reply_markup=get_keyboard_with_menu(get_grammar_qa_keyboard())
    )
    
    await state.set_state(LessonStates.GRAMMAR_QA)
    await callback.answer()


@router.message(F.text, LessonStates.GRAMMAR_QA)
async def process_grammar_question(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ"""
    user_question = message.text
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
    thinking_msg = await message.answer(MESSAGES["teacher_thinking"])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI –∞–≥–µ–Ω—Ç–∞-—É—á–∏—Ç–µ–ª—è
        teacher_response = await get_teacher_response(user_question)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é"
        await thinking_msg.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —É—á–∏—Ç–µ–ª—è
        await message.answer(
            teacher_response,
            reply_markup=get_keyboard_with_menu(get_grammar_qa_keyboard())
        )
        
    except Exception as e:
        await thinking_msg.delete()
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
            reply_markup=get_keyboard_with_menu(get_grammar_qa_keyboard())
        )
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")


@router.callback_query(F.data == "grammar_now_understood", LessonStates.GRAMMAR_QA)
async def grammar_now_understood(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–Ω—è–ª –ø–æ—Å–ª–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "üéâ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ!\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É...",
        reply_markup=get_keyboard_with_menu(get_next_keyboard())
    )
    
    await state.set_state(LessonStates.GRAMMAR_COMPLETE)
    await callback.answer()


@router.callback_query(F.data == "grammar_still_questions", LessonStates.GRAMMAR_QA)
async def grammar_still_questions(callback: CallbackQuery, state: FSMContext):
    """–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã"""
    await callback.message.edit_text(
        "–ó–∞–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ:",
        reply_markup=get_keyboard_with_menu(get_grammar_qa_keyboard())
    )
    
    # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ GRAMMAR_QA –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    await callback.answer()


@router.callback_query(F.data == "next", LessonStates.GRAMMAR_COMPLETE)
async def grammar_complete_next(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–ª–æ–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ª–µ–∫—Å–∏–∫–æ-–≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º"""
    await callback.message.edit_text(
        "üéâ –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º..."
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    user_progress.update_progress(
        callback.from_user.id,
        current_block="lexico_grammar",
        current_item=0
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –≥–ª–∞–≥–æ–ª–∞–º–∏
    await start_verb_exercise(callback.message, state)
    await callback.answer()

async def start_verb_exercise(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –≥–ª–∞–≥–æ–ª–∞–º–∏"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    verb_data = await load_json_data("verb_it.json")
    print(f"DEBUG: verb_data = {verb_data}") 
    if not verb_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
        return
        
    print(f"DEBUG: verb_data length = {len(verb_data)}")  
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        verb_exercises=verb_data,
        current_verb=0,
        verb_score=0
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(MESSAGES["verb_exercise_intro"])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    await show_verb_exercise(message, state)


async def show_verb_exercise(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –≥–ª–∞–≥–æ–ª–∞–º–∏"""
    data = await state.get_data()
    exercises = data.get("verb_exercises", [])
    current_index = data.get("current_verb", 0)
    
    if current_index >= len(exercises):
        # –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        score = data.get("verb_score", 0)
        await message.answer(
            f"{MESSAGES['verb_exercise_complete']}\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(exercises)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        await state.set_state(LessonStates.VERB_COMPLETE)
        return
    
    current_exercise = exercises[current_index]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    await message.answer(
        f"üíª **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {current_index + 1}/{len(exercises)}:**\n\n{current_exercise['text']}",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_text_exercise_keyboard())
    )
    
    await state.set_state(LessonStates.VERB_EXERCISE)


@router.message(F.text, LessonStates.VERB_EXERCISE)
async def process_verb_answer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –≥–ª–∞–≥–æ–ª–∞–º–∏"""
    data = await state.get_data()
    exercises = data.get("verb_exercises", [])
    current_index = data.get("current_verb", 0)
    score = data.get("verb_score", 0)
    
    if current_index >= len(exercises):
        return
    
    current_exercise = exercises[current_index]
    user_answer = message.text.strip().lower()
    correct_answer = current_exercise["answer"].lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if user_answer == correct_answer:
        response_text = MESSAGES["correct_answer"]
        score += 1
        await state.update_data(verb_score=score)
    else:
        response_text = f"{MESSAGES['wrong_answer']}{current_exercise['answer']}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await message.answer(
        f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:** {current_exercise['answer']}\n\n{response_text}",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_continue_keyboard())
    )


@router.callback_query(F.data == "skip_text_exercise", LessonStates.VERB_EXERCISE)
async def skip_verb_exercise(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –≥–ª–∞–≥–æ–ª–∞–º–∏"""
    data = await state.get_data()
    current_index = data.get("current_verb", 0)
    await state.update_data(current_verb=current_index + 1)
    
    await show_verb_exercise(callback.message, state)
    await callback.answer()


@router.callback_query(F.data == "continue_exercise", LessonStates.VERB_EXERCISE)
async def continue_verb_exercise_specific(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –≥–ª–∞–≥–æ–ª–∞–º–∏"""
    data = await state.get_data()
    current_index = data.get("current_verb", 0)
    await state.update_data(current_verb=current_index + 1)
    
    await show_verb_exercise(callback.message, state)
    await callback.answer()


@router.callback_query(F.data == "next", LessonStates.VERB_COMPLETE)
async def verb_complete_next(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –≥–ª–∞–≥–æ–ª–∞–º–∏, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –≤—ã–±–æ—Ä—É"""
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–∏–ø—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...")
    
    await start_mchoice_exercise(callback.message, state)
    await callback.answer()

async def start_mchoice_exercise(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    mchoice_data = await load_json_data("mchoice_it.json")
    if not mchoice_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –≤—ã–±–æ—Ä–æ–º")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        mchoice_exercises=mchoice_data,
        current_mchoice=0,
        mchoice_score=0
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(MESSAGES["mchoice_intro"])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    await show_mchoice_exercise(message, state)


async def show_mchoice_exercise(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º"""
    data = await state.get_data()
    exercises = data.get("mchoice_exercises", [])
    current_index = data.get("current_mchoice", 0)
    
    if current_index >= len(exercises):
        # –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        score = data.get("mchoice_score", 0)
        await message.answer(
            f"{MESSAGES['mchoice_complete']}\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(exercises)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        await state.set_state(LessonStates.MCHOICE_COMPLETE)
        return
    
    current_exercise = exercises[current_index]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    await message.answer(
        f"üíª **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ({current_index + 1}/{len(exercises)}):**\n\n{current_exercise['sentence']}",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_mchoice_keyboard(current_exercise['options'], current_index))
    )
    
    await state.set_state(LessonStates.MCHOICE_EXERCISE)


@router.callback_query(F.data.startswith("mchoice_"), LessonStates.MCHOICE_EXERCISE)
async def process_mchoice_answer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º"""
    data = await state.get_data()
    exercises = data.get("mchoice_exercises", [])
    current_index = data.get("current_mchoice", 0)
    score = data.get("mchoice_score", 0)
    
    if current_index >= len(exercises):
        return
    
    current_exercise = exercises[current_index]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    parts = callback.data.split("_")
    if len(parts) >= 4:
        selected_answer = parts[3]
    else:
        selected_answer = ""
    
    correct_answer = current_exercise["answer"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if selected_answer == correct_answer:
        response_text = MESSAGES["correct_answer"]
        score += 1
        await state.update_data(mchoice_score=score)
    else:
        response_text = f"{MESSAGES['wrong_answer']}{correct_answer}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await callback.message.edit_text(
        f"**–í–æ–ø—Ä–æ—Å:** {current_exercise['sentence']}\n"
        f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:** {correct_answer}\n\n{response_text}",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_continue_keyboard())
    )
    
    await callback.answer()


@router.callback_query(F.data == "continue_exercise", LessonStates.MCHOICE_EXERCISE)
async def continue_mchoice_exercise_specific(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º"""
    data = await state.get_data()
    current_index = data.get("current_mchoice", 0)
    await state.update_data(current_mchoice=current_index + 1)
    
    await show_mchoice_exercise(callback.message, state)
    await callback.answer()


@router.callback_query(F.data == "next", LessonStates.MCHOICE_COMPLETE)
async def mchoice_complete_next(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º —Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")

    # –û–¥–∏–Ω —Ä–∞–∑ –∑–∞–ø—É—Å–∫–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    await start_negative_exercise(callback.message, state)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    user_progress.update_progress(
        callback.from_user.id,
        current_block="lexico_grammar",
        current_item=0
    )

    await callback.answer()
    
async def start_negative_exercise(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Ñ–æ—Ä–º—É"""
    negative_data = await load_json_data("negative_it.json")
    if not negative_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        return

    await state.update_data(
        negative_exercises=negative_data,
        current_negative=0,
        negative_score=0
    )

    await message.answer("‚úçÔ∏è **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:** –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.")
 
    await show_negative_exercise(message, state)
    
async def show_negative_exercise(message: Message, state: FSMContext):
    data = await state.get_data()
    exercises = data.get("negative_exercises", [])
    current_index = data.get("current_negative", 0)

    if current_index >= len(exercises):
        score = data.get("negative_score", 0)
        await message.answer(
            f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è!\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(exercises)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        await state.set_state(LessonStates.NEGATIVE_COMPLETE)
        return

    current_exercise = exercises[current_index]
    await message.answer(
        f"üíª **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {current_index + 1}/{len(exercises)}:**\n"
        f"{current_exercise['text']}",
        parse_mode="Markdown"
    )
    await state.set_state(LessonStates.NEGATIVE_EXERCISE)  # ‚Üê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è


@router.message(F.text, LessonStates.NEGATIVE_EXERCISE)
async def process_negative_answer(message: Message, state: FSMContext):
    user_answer = message.text.strip().lower()
    data = await state.get_data()
    exercises = data.get("negative_exercises", [])
    current_index = data.get("current_negative", 0)
    score = data.get("negative_score", 0)

    if current_index >= len(exercises):
        return

    current_exercise = exercises[current_index]
    correct_answers = [ans.lower() for ans in current_exercise["answer"]]

    if any(user_answer == ans for ans in correct_answers):
        response_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
        score += 1
        await state.update_data(negative_score=score)
    else:
        examples = "\n".join([f"- {ans}" for ans in current_exercise["answer"]])
        response_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n{examples}"

    await message.answer(f"{response_text}\n\n–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é...")
    await state.update_data(current_negative=current_index + 1)
    await show_negative_exercise(message, state)

    
@router.callback_query(F.data == "next", LessonStates.NEGATIVE_COMPLETE)
async def negative_complete_next(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–∏–ø—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...")
    await start_question_exercise(callback.message, state)  # ‚Üê –ó–∞–º–µ–Ω–µ–Ω–æ
    await callback.answer()
    
async def start_question_exercise(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—É—é —Ñ–æ—Ä–º—É"""
    question_data = await load_json_data("question_it.json")
    if not question_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        return

    await state.update_data(
        question_exercises=question_data,
        current_question=0,
        question_score=0
    )

    await message.answer(
        "‚ùì **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:** –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç."
    )
    await show_question_exercise(message, state)


async def show_question_exercise(message: Message, state: FSMContext):
    data = await state.get_data()
    exercises = data.get("question_exercises", [])
    current_index = data.get("current_question", 0)

    if current_index >= len(exercises):
        score = data.get("question_score", 0)
        await message.answer(
            f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã!\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(exercises)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        await state.set_state(LessonStates.QUESTION_COMPLETE)
        return

    current_exercise = exercises[current_index]
    await message.answer(
        f"üíª **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {current_index + 1}/{len(exercises)}:**\n"
        f"{current_exercise['text']}",
        parse_mode="Markdown"
    )
    await state.set_state(LessonStates.QUESTION_EXERCISE)


@router.message(F.text, LessonStates.QUESTION_EXERCISE)
async def process_question_answer(message: Message, state: FSMContext):
    user_answer = message.text.strip().lower()
    data = await state.get_data()
    exercises = data.get("question_exercises", [])
    current_index = data.get("current_question", 0)
    score = data.get("question_score", 0)

    if current_index >= len(exercises):
        return

    current_exercise = exercises[current_index]
    correct_answer = current_exercise["answer"].lower()

    if user_answer == correct_answer:
        response_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
        score += 1
        await state.update_data(question_score=score)
    else:
        response_text = (
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:\n- {current_exercise['answer']}"
        )

    await message.answer(
        f"{response_text}\n\n–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é...",
        parse_mode="Markdown"
    )

    await state.update_data(current_question=current_index + 1)
    await show_question_exercise(message, state)
    
@router.callback_query(F.data == "next", LessonStates.QUESTION_COMPLETE)
async def question_complete_next(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—é...")
    await start_missing_word(callback.message, state)
    await callback.answer()
    
async def start_missing_word(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è '–í—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ'"""
    missing_data = await load_json_data("missing_word_it.json")
    if not missing_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è '–ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ'")
        return

    await state.update_data(
        missing_words=missing_data,
        current_missing=0,
        missing_score=0
    )

    await message.answer(
        "üî§ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:** –í—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç."
    )
    await show_missing_word_exercise(message, state)


async def show_missing_word_exercise(message: Message, state: FSMContext):
    data = await state.get_data()
    exercises = data.get("missing_words", [])
    current_index = data.get("current_missing", 0)

    if current_index >= len(exercises):
        score = data.get("missing_score", 0)
        await message.answer(
            f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤!\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(exercises)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        await state.set_state(LessonStates.MISSING_WORD_COMPLETE)
        return

    current_exercise = exercises[current_index]

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Markdown
    escaped_statement = current_exercise["statement"].replace("_", r"\_")

    await message.answer(
        f"üíª **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {current_index + 1}/{len(exercises)}:**\n"
        f"{escaped_statement}",
        parse_mode="Markdown"
    )
    await state.set_state(LessonStates.MISSING_WORD_EXERCISE)


@router.message(F.text, LessonStates.MISSING_WORD_EXERCISE)
async def process_missing_word_answer(message: Message, state: FSMContext):
    user_answer = message.text.strip().lower()
    data = await state.get_data()
    exercises = data.get("missing_words", [])
    current_index = data.get("current_missing", 0)
    score = data.get("missing_score", 0)

    if current_index >= len(exercises):
        return

    current_exercise = exercises[current_index]
    correct_answers = [ans.lower() for ans in current_exercise["answers"]]

    if user_answer in correct_answers:
        response_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
        score += 1
        await state.update_data(missing_score=score)
    else:
        examples = "\n".join([f"- {ans}" for ans in current_exercise["answers"]])
        response_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n{examples}"

    await message.answer(
        f"{response_text}\n\n–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é...",
        parse_mode="Markdown"
    )

    await state.update_data(current_missing=current_index + 1)
    await show_missing_word_exercise(message, state)
    
@router.callback_query(F.data == "next", LessonStates.MISSING_WORD_COMPLETE)
async def missing_word_complete_next(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è '–ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ', –ø–µ—Ä–µ—Ö–æ–¥ –∫  –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—é"""
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—é...")
    await start_listening_true_false(callback.message, state)
    await callback.answer()

async def start_listening_true_false(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π True/False –¥–ª—è –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    listening_data = await load_json_data("listening_tasks_it.json")
    if not listening_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        listening_true_false=listening_data,
        current_listening_tf=0,
        listening_tf_score=0
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(MESSAGES["listening_true_false_intro"])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    await show_listening_true_false(message, state)


async def show_listening_true_false(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ True/False –¥–ª—è –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    exercises = data.get("listening_true_false", [])
    current_index = data.get("current_listening_tf", 0)
    
    if current_index >= len(exercises):
        # –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        score = data.get("listening_tf_score", 0)
        await message.answer(
            f"{MESSAGES['listening_true_false_complete']}\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(exercises)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        await state.set_state(LessonStates.LISTENING_TRUE_FALSE_COMPLETE)
        return
    
    current_exercise = exercises[current_index]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è —Ñ—Ä–∞–∑—ã
    audio_filename = f"listening_tf_{current_index}_{current_exercise['phrase'][:20].replace(' ', '_')}"
    audio_path = await generate_audio(current_exercise['phrase'], audio_filename, 'en')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
    if audio_path and os.path.exists(audio_path):
        try:
            audio = FSInputFile(audio_path)
            await message.answer_audio(
                audio,
                caption="üéß **–ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ —Ñ—Ä–∞–∑—É**",
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
            await message.answer("üéß **–ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ**")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    await message.answer(
        f"üìù **–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ({current_index + 1}/{len(exercises)}):**\n\n{current_exercise['statement']}",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_true_false_keyboard())
    )
    
    await state.set_state(LessonStates.LISTENING_TRUE_FALSE)


@router.callback_query(F.data.startswith("listening_"), LessonStates.LISTENING_TRUE_FALSE)
async def process_listening_true_false_answer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ True/False –¥–ª—è –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    exercises = data.get("listening_true_false", [])
    current_index = data.get("current_listening_tf", 0)
    score = data.get("listening_tf_score", 0)
    
    if current_index >= len(exercises):
        return
    
    current_exercise = exercises[current_index]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    if callback.data == "listening_true":
        selected_answer = "True"
    else:
        selected_answer = "False"
    
    correct_answer = current_exercise["correct_answer"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if selected_answer == correct_answer:
        response_text = MESSAGES["correct_answer"]
        score += 1
        await state.update_data(listening_tf_score=score)
    else:
        response_text = f"{MESSAGES['wrong_answer']}{correct_answer}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await callback.message.edit_text(
        f"**–§—Ä–∞–∑–∞:** {current_exercise['phrase']}\n"
        f"**–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:** {current_exercise['statement']}\n"
        f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:** {correct_answer}\n\n{response_text}",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_continue_keyboard())
    )
    
    await callback.answer()


@router.callback_query(F.data == "continue_exercise", LessonStates.LISTENING_TRUE_FALSE)
async def continue_listening_tf_specific(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å True/False –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    data = await state.get_data()
    current_index = data.get("current_listening_tf", 0)
    await state.update_data(current_listening_tf=current_index + 1)
    
    await show_listening_true_false(callback.message, state)
    await callback.answer()


@router.callback_query(F.data == "next", LessonStates.LISTENING_TRUE_FALSE_COMPLETE)
async def listening_tf_complete_next(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ True/False, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –≤—ã–±–æ—Ä—É"""
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–∏–ø—É –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    await start_listening_choice(callback.message, state)
    await callback.answer()

async def start_listening_choice(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –¥–ª—è –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    listening_data = await load_json_data("listening_choice_it.json")
    if not listening_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—ã–±–æ—Ä)")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        listening_choice=listening_data,
        current_listening_choice=0,
        listening_choice_score=0
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(MESSAGES["listening_choice_intro"])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    await show_listening_choice(message, state)


async def show_listening_choice(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –¥–ª—è –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    exercises = data.get("listening_choice", [])
    current_index = data.get("current_listening_choice", 0)
    
    if current_index >= len(exercises):
        # –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        score = data.get("listening_choice_score", 0)
        await message.answer(
            f"{MESSAGES['listening_choice_complete']}\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(exercises)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        await state.set_state(LessonStates.LISTENING_CHOICE_COMPLETE)
        return
    
    current_exercise = exercises[current_index]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è —Ñ—Ä–∞–∑—ã
    audio_filename = f"listening_choice_{current_index}_{current_exercise['phrase'][:20].replace(' ', '_')}"
    audio_path = await generate_audio(current_exercise['phrase'], audio_filename, 'en')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
    if audio_path and os.path.exists(audio_path):
        try:
            audio = FSInputFile(audio_path)
            await message.answer_audio(
                audio,
                caption="üéß **–ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ —Ñ—Ä–∞–∑—É 2 —Ä–∞–∑–∞**",
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
            await message.answer("üéß **–ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ**")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    await message.answer(
        f"‚ùì **{current_exercise['question']} ({current_index + 1}/{len(exercises)})**",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_listening_choice_keyboard(current_exercise['options'], current_index))
    )
    
    await state.set_state(LessonStates.LISTENING_CHOICE)


@router.callback_query(F.data.startswith("listening_choice_"), LessonStates.LISTENING_CHOICE)
async def process_listening_choice_answer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–ª—è –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    exercises = data.get("listening_choice", [])
    current_index = data.get("current_listening_choice", 0)
    score = data.get("listening_choice_score", 0)
    
    if current_index >= len(exercises):
        return
    
    current_exercise = exercises[current_index]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    parts = callback.data.split("_")
    if len(parts) >= 5:
        selected_answer = "_".join(parts[4:])  # –ë–µ—Ä–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ _
    else:
        selected_answer = ""
    
    correct_answer = current_exercise["correct_answer"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if selected_answer == correct_answer:
        response_text = MESSAGES["correct_answer"]
        score += 1
        await state.update_data(listening_choice_score=score)
    else:
        response_text = f"{MESSAGES['wrong_answer']}{correct_answer}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await callback.message.edit_text(
        f"**–§—Ä–∞–∑–∞:** {current_exercise['phrase']}\n"
        f"**–í–æ–ø—Ä–æ—Å:** {current_exercise['question']}\n"
        f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:** {correct_answer}\n\n{response_text}",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_continue_keyboard())
    )
    
    await callback.answer()


@router.callback_query(F.data == "continue_exercise", LessonStates.LISTENING_CHOICE)
async def continue_listening_choice_specific(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    data = await state.get_data()
    current_index = data.get("current_listening_choice", 0)
    await state.update_data(current_listening_choice=current_index + 1)
    
    await show_listening_choice(callback.message, state)
    await callback.answer()


@router.callback_query(F.data == "next", LessonStates.LISTENING_CHOICE_COMPLETE)
async def listening_choice_complete_next(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é —Ñ—Ä–∞–∑"""
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é —Ñ—Ä–∞–∑...")
    
    await start_listening_phrases(callback.message, state)
    await callback.answer()

async def start_listening_phrases(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º —Ñ—Ä–∞–∑"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    phrases_data = await load_json_data("listening_phrases_it.json")
    if not phrases_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        listening_phrases=phrases_data,
        current_listening_phrase=0,
        listening_phrases_score=0
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(MESSAGES["listening_phrases_intro"])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    await show_listening_phrase(message, state)


async def show_listening_phrase(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º —Ñ—Ä–∞–∑—ã"""
    data = await state.get_data()
    exercises = data.get("listening_phrases", [])
    current_index = data.get("current_listening_phrase", 0)
    
    if current_index >= len(exercises):
        # –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        score = data.get("listening_phrases_score", 0)
        await message.answer(
            f"{MESSAGES['listening_phrases_complete']}\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(exercises)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        await state.set_state(LessonStates.LISTENING_PHRASES_COMPLETE)
        return
    
    current_exercise = exercises[current_index]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è —Ñ—Ä–∞–∑—ã
    audio_filename = f"listening_phrase_{current_index}_{current_exercise['phrase'][:20].replace(' ', '_')}"
    audio_path = await generate_audio(current_exercise['phrase'], audio_filename, 'en')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
    if audio_path and os.path.exists(audio_path):
        try:
            audio = FSInputFile(audio_path)
            await message.answer_audio(
                audio,
                caption="üéß **–ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ —Ñ—Ä–∞–∑—É 2 —Ä–∞–∑–∞**",
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
            await message.answer("üéß **–ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ**")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(
        f"üî§ **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è ({current_index + 1}/{len(exercises)}):** {current_exercise.get('transcription', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å —Ñ—Ä–∞–∑—É' –∏ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É –∑–∞ —Å–ø–∏–∫–µ—Ä–æ–º, –æ—Ç–ø—Ä–∞–≤–∏–≤ –≥–æ–ª–æ—Å–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_listening_phrases_keyboard())
    )
    
    await state.set_state(LessonStates.LISTENING_PHRASES)


@router.callback_query(F.data == "record_phrase", LessonStates.LISTENING_PHRASES)
async def request_phrase_recording(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã"""
    # await callback.message.answer(  # –ò–∑–º–µ–Ω–∏—Ç—å edit_text –Ω–∞ answer
       # "üé§ –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º —Ñ—Ä–∞–∑—ã.\n\n"
       # "–î–ª—è –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤ Telegram –∏ –ø—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ —Ñ—Ä–∞–∑—É.",
       # reply_markup=get_keyboard_with_menu(get_listening_phrases_keyboard())
    # )
    
    await state.set_state(LessonStates.LISTENING_PHRASES_RECORD)
    await callback.answer()


@router.message(F.voice, LessonStates.LISTENING_PHRASES_RECORD)
async def process_phrase_recording(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã"""
    data = await state.get_data()
    exercises = data.get("listening_phrases", [])
    current_index = data.get("current_listening_phrase", 0)
    
    if current_index >= len(exercises):
        return
    
    current_exercise = exercises[current_index]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    processing_msg = await message.answer("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_file = await message.bot.get_file(message.voice.file_id)
        voice_path = f"media/audio/phrase_{message.from_user.id}_{current_index}.ogg"
        
        await message.bot.download_file(voice_file.file_path, voice_path)
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
        is_correct = await simple_pronunciation_check(current_exercise['phrase'], voice_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(voice_path):
            os.remove(voice_path)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if is_correct:
            await message.answer(
                MESSAGES["listening_correct"],
                reply_markup=get_keyboard_with_menu(get_phrase_result_keyboard())
            )
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç
            score = data.get("listening_phrases_score", 0)
            await state.update_data(listening_phrases_score=score + 1)
        else:
            await message.answer(
                MESSAGES["listening_incorrect"],
                reply_markup=get_keyboard_with_menu(get_phrase_result_keyboard())
            )
    
    except Exception as e:
        await processing_msg.delete()
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            reply_markup=get_keyboard_with_menu(get_phrase_result_keyboard())
        )
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@router.callback_query(F.data == "skip_phrase", LessonStates.LISTENING_PHRASES)
@router.callback_query(F.data == "skip_phrase", LessonStates.LISTENING_PHRASES_RECORD)
@router.callback_query(F.data == "next_phrase")
async def next_listening_phrase(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—Ä–∞–∑–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    data = await state.get_data()
    current_index = data.get("current_listening_phrase", 0)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
    await state.update_data(current_listening_phrase=current_index + 1)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_progress.update_progress(
        callback.from_user.id, 
        current_item=current_index + 1
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ñ—Ä–∞–∑—É
    await show_listening_phrase(callback.message, state)
    await callback.answer()


@router.callback_query(F.data == "retry_phrase")
async def retry_phrase(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã"""
    await callback.message.edit_text(
        "üé§ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º —Ñ—Ä–∞–∑—ã.",
        reply_markup=get_keyboard_with_menu(get_listening_phrases_keyboard())
    )
    
    await state.set_state(LessonStates.LISTENING_PHRASES_RECORD)
    await callback.answer()


@router.callback_query(F.data == "next", LessonStates.LISTENING_PHRASES_COMPLETE)
async def listening_phrases_complete_next(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∞ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–∏—Å—å–º—É"""
    await callback.message.edit_text(
        "üéâ –ë–ª–æ–∫ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –±–ª–æ–∫—É –ø–∏—Å—å–º–µ–Ω–Ω–æ–π —Ä–µ—á–∏..."
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    user_progress.update_progress(
        callback.from_user.id,
        current_block="writing",
        current_item=0
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –ø–∏—Å—å–º–∞
    await start_writing_sentences(callback.message, state)
    await callback.answer()

async def start_writing_sentences(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    words_data = await load_json_data("words_written.json")
    if not words_data or "words" not in words_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∏—Å—å–º–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        writing_words=words_data["words"],
        current_writing_word=0,
        writing_sentences_complete_count=0
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(MESSAGES["writing_sentences_intro"])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    await show_writing_sentence_task(message, state)

async def show_writing_sentence_task(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    data = await state.get_data()
    words = data.get("writing_words", [])
    current_index = data.get("current_writing_word", 0)
    
    if current_index >= len(words):
        # –í—Å–µ —Å–ª–æ–≤–∞ –ø—Ä–æ–π–¥–µ–Ω—ã
        completed = data.get("writing_sentences_complete_count", 0)
        await message.answer(
            f"{MESSAGES['writing_sentences_complete']}\n\n"
            f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {completed}/{len(words)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        await state.set_state(LessonStates.WRITING_SENTENCES_COMPLETE)
        return
    
    current_word = words[current_index]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
    await message.answer(
        f"‚úçÔ∏è **{MESSAGES['writing_word_prompt']} ({current_index + 1}/{len(words)})**\n\n"
        f"**{current_word}**",
        # "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_writing_skip_keyboard())
    )
    
    await state.set_state(LessonStates.WRITING_SENTENCES)

@router.message(F.text, LessonStates.WRITING_SENTENCES)
async def process_writing_sentence(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    user_sentence = message.text.strip()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    checking_msg = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –ø–æ–º–æ—â—å—é AI
        feedback = await check_writing_with_ai(user_sentence, "sentence")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        await checking_msg.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        await message.answer(
            f"**–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:** {user_sentence}\n\n{feedback}",
            parse_mode="Markdown",
            reply_markup=get_keyboard_with_menu(get_continue_writing_keyboard())
        )
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
        data = await state.get_data()
        completed = data.get("writing_sentences_complete_count", 0)
        await state.update_data(writing_sentences_complete_count=completed + 1)
        
    except Exception as e:
        await checking_msg.delete()
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
            reply_markup=get_keyboard_with_menu(get_continue_writing_keyboard())
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")


@router.callback_query(F.data == "skip_writing", LessonStates.WRITING_SENTENCES)
@router.callback_query(F.data == "continue_writing", LessonStates.WRITING_SENTENCES)
async def continue_writing_sentences(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    data = await state.get_data()
    current_index = data.get("current_writing_word", 0)
    await state.update_data(current_writing_word=current_index + 1)
    
    await show_writing_sentence_task(callback.message, state)
    await callback.answer()


@router.callback_query(F.data == "next", LessonStates.WRITING_SENTENCES_COMPLETE)
async def writing_sentences_complete_next(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–µ–≤–æ–¥—É"""
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è...")
    
    await start_writing_translation(callback.message, state)
    await callback.answer()


async def start_writing_translation(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    translation_data = await load_json_data("sentence_translation_it.json")
    if not translation_data or "phrases" not in translation_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        translation_phrases=translation_data["phrases"],
        current_translation=0,
        translation_complete_count=0
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(MESSAGES["writing_translation_intro"])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    await show_writing_translation_task(message, state)


async def show_writing_translation_task(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    data = await state.get_data()
    phrases = data.get("translation_phrases", [])
    current_index = data.get("current_translation", 0)
    
    if current_index >= len(phrases):
        # –í—Å–µ —Ñ—Ä–∞–∑—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã
        completed = data.get("translation_complete_count", 0)
        await message.answer(
            f"{MESSAGES['writing_translation_complete']}\n\n"
            f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {completed}/{len(phrases)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        await state.set_state(LessonStates.WRITING_TRANSLATION_COMPLETE)
        return
    
    current_phrase = phrases[current_index]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
    await message.answer(
        f"üåê **{MESSAGES['writing_translate_prompt']} ({current_index + 1}/{len(phrases)})**\n\n"
        f"**{current_phrase}**\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_writing_skip_keyboard())
    )
    
    await state.set_state(LessonStates.WRITING_TRANSLATION)


@router.message(F.text, LessonStates.WRITING_TRANSLATION)
async def process_writing_translation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    user_translation = message.text.strip()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    checking_msg = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –ø–µ—Ä–µ–≤–æ–¥...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –ø–æ–º–æ—â—å—é AI
        feedback = await check_writing_with_ai(user_translation, "translation")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        await checking_msg.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        await message.answer(
            f"**–í–∞—à –ø–µ—Ä–µ–≤–æ–¥:** {user_translation}\n\n{feedback}",
            parse_mode="Markdown",
            reply_markup=get_keyboard_with_menu(get_continue_writing_keyboard())
        )
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
        data = await state.get_data()
        completed = data.get("translation_complete_count", 0)
        await state.update_data(translation_complete_count=completed + 1)
        
    except Exception as e:
        await checking_msg.delete()
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∞.",
            reply_markup=get_keyboard_with_menu(get_continue_writing_keyboard())
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")


@router.callback_query(F.data == "skip_writing", LessonStates.WRITING_TRANSLATION)
@router.callback_query(F.data == "continue_writing", LessonStates.WRITING_TRANSLATION)
async def continue_writing_translation(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥"""
    data = await state.get_data()
    current_index = data.get("current_translation", 0)
    await state.update_data(current_translation=current_index + 1)
    
    await show_writing_translation_task(callback.message, state)
    await callback.answer()

# –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∞ –ø–∏—Å—å–º–∞:
@router.callback_query(F.data == "next", LessonStates.WRITING_TRANSLATION_COMPLETE)
async def writing_translation_complete_next(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∞ –ø–∏—Å—å–º–µ–Ω–Ω–æ–π —Ä–µ—á–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≥–æ–≤–æ—Ä–µ–Ω–∏—é"""
    await callback.message.edit_text(
        "üéâ –ë–ª–æ–∫ –ø–∏—Å—å–º–µ–Ω–Ω–æ–π —Ä–µ—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –±–ª–æ–∫—É - –≥–æ–≤–æ—Ä–µ–Ω–∏–µ..."
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    user_progress.update_progress(
        callback.from_user.id,
        current_block="speaking",
        current_item=0
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –≥–æ–≤–æ—Ä–µ–Ω–∏—è
    await start_speaking_block(callback.message, state)
    await callback.answer()


async def start_speaking_block(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –≥–æ–≤–æ—Ä–µ–Ω–∏—è"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    speaking_data = await load_json_data("speaking_it.json")
    if not speaking_data or "topics" not in speaking_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º –¥–ª—è –≥–æ–≤–æ—Ä–µ–Ω–∏—è")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        speaking_topics=speaking_data["topics"],
        current_speaking_topic=0,
        speaking_complete_count=0
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(MESSAGES["speaking_intro"])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–º—É
    await show_speaking_topic(message, state)


async def show_speaking_topic(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—É –¥–ª—è –≥–æ–≤–æ—Ä–µ–Ω–∏—è"""
    data = await state.get_data()
    topics = data.get("speaking_topics", [])
    current_index = data.get("current_speaking_topic", 0)
    
    if current_index >= len(topics):
        # –í—Å–µ —Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω—ã - –∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω!
        completed = data.get("speaking_complete_count", 0)
        
        await message.answer(
            f"{MESSAGES['speaking_complete']}\n\n"
            f"–¢–µ–º –æ–±—Å—É–∂–¥–µ–Ω–æ: {completed}/{len(topics)} üéØ\n\n"
            f"{MESSAGES['speaking_final']}",
            reply_markup=get_keyboard_with_menu(get_final_keyboard())
        )
        await state.set_state(LessonStates.SPEAKING_COMPLETE)
        return
    
    current_topic = topics[current_index]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–º—É –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    await message.answer(
        f"üéôÔ∏è **{MESSAGES['speaking_situation']} ({current_index + 1}/{len(topics)})**\n\n"
        f"*{current_topic}*\n\n",
        # f"{MESSAGES['speaking_instruction']}",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_speaking_keyboard())
    )
    
    await state.set_state(LessonStates.SPEAKING)


@router.callback_query(F.data == "record_speaking", LessonStates.SPEAKING)
async def request_speaking_recording(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è"""
    await callback.message.edit_text(
        "üé§ **–ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º–∏ –º—ã—Å–ª—è–º–∏ –ø–æ —Ç–µ–º–µ.**\n\n"
        "üí° –ì–æ–≤–æ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ, "
        "–ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–Ω–µ–Ω–∏–µ–º.\n\n"
        "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤ Telegram –∏ –Ω–∞—á–Ω–∏—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å.",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_speaking_keyboard())
    )
    
    await state.set_state(LessonStates.SPEAKING_RECORD)
    await callback.answer()


@router.message(F.voice, LessonStates.SPEAKING_RECORD)
async def process_speaking_recording(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –≥–æ–≤–æ—Ä–µ–Ω–∏—è"""
    data = await state.get_data()
    topics = data.get("speaking_topics", [])
    current_index = data.get("current_speaking_topic", 0)
    
    if current_index >= len(topics):
        return
    
    current_topic = topics[current_index]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    analyzing_msg = await message.answer(MESSAGES["speaking_analyzing"])
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_file = await message.bot.get_file(message.voice.file_id)
        voice_path = f"media/audio/speaking_{message.from_user.id}_{current_index}.ogg"
        
        await message.bot.download_file(voice_file.file_path, voice_path)
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - Whisper API)
        transcribed_text = await transcribe_audio_simple(voice_path)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é AI
        analysis = await analyze_speaking_with_ai(transcribed_text, current_topic)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(voice_path):
            os.remove(voice_path)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–Ω–∞–ª–∏–∑–µ
        await analyzing_msg.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
        await message.answer(
            f"**–í–∞—à–∞ —Ç–µ–º–∞:** {current_topic}\n\n{analysis}",
            parse_mode="Markdown",
            reply_markup=get_keyboard_with_menu(get_speaking_result_keyboard())
        )
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
        completed = data.get("speaking_complete_count", 0)
        await state.update_data(speaking_complete_count=completed + 1)
        
    except Exception as e:
        await analyzing_msg.delete()
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∞—à–µ–≥–æ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è.",
            reply_markup=get_keyboard_with_menu(get_speaking_result_keyboard())
        )
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—á–∏: {e}")


@router.callback_query(F.data == "skip_speaking", LessonStates.SPEAKING)
@router.callback_query(F.data == "skip_speaking", LessonStates.SPEAKING_RECORD)
@router.callback_query(F.data == "next_speaking")
async def next_speaking_topic(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ –¥–ª—è –≥–æ–≤–æ—Ä–µ–Ω–∏—è"""
    data = await state.get_data()
    current_index = data.get("current_speaking_topic", 0)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
    await state.update_data(current_speaking_topic=current_index + 1)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_progress.update_progress(
        callback.from_user.id, 
        current_item=current_index + 1
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É
    await show_speaking_topic(callback.message, state)
    await callback.answer()


@router.callback_query(F.data == "retry_speaking")
async def retry_speaking(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ —Ç–æ–π –∂–µ —Ç–µ–º–µ"""
    await callback.message.edit_text(
        "üé§ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º–∏ –º—ã—Å–ª—è–º–∏ –ø–æ —Ç–µ–º–µ.",
        reply_markup=get_keyboard_with_menu(get_speaking_keyboard())
    )
    
    await state.set_state(LessonStates.SPEAKING_RECORD)
    await callback.answer()
# –§–∏–Ω–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞
@router.callback_query(F.data == "main_menu", LessonStates.SPEAKING_COMPLETE)
@router.callback_query(F.data == "restart_lesson", LessonStates.SPEAKING_COMPLETE)
async def course_complete_actions(callback: CallbackQuery, state: FSMContext):
    """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫—É—Ä—Å–∞"""
    if callback.data == "restart_lesson":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        await state.clear()
        user_progress.reset_progress(callback.from_user.id)
        
        await callback.message.edit_text(
            "üîÑ –ö—É—Ä—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –ì–æ—Ç–æ–≤—ã –ø—Ä–æ–π—Ç–∏ –µ–≥–æ –∑–∞–Ω–æ–≤–æ?\n\n"
            "–≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π!",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.edit_text(
            "üè† **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!**\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ª—é–±–æ–π –±–ª–æ–∫ –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ –≤–µ—Å—å –∫—É—Ä—Å –∑–∞–Ω–æ–≤–æ.",
            parse_mode="Markdown",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ–≥–æ –∫—É—Ä—Å–∞
@router.callback_query(F.data == "next", LessonStates.SPEAKING_COMPLETE)
async def final_course_completion(callback: CallbackQuery, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—É—Ä—Å–∞"""
    await callback.message.edit_text(
        "üéì **–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú –° –ó–ê–í–ï–†–®–ï–ù–ò–ï–ú –ö–£–†–°–ê!** üéì\n\n"
        "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤—Å–µ 8 –±–ª–æ–∫–æ–≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤:\n"
        "‚úÖ –ò–∑—É—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤\n"
        "‚úÖ –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ\n"
        "‚úÖ –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
        "‚úÖ –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ —Å AI-—É—á–∏—Ç–µ–ª–µ–º\n"
        "‚úÖ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
        "‚úÖ –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "‚úÖ –ü–∏—Å—å–º–µ–Ω–Ω–∞—è —Ä–µ—á—å\n"
        "‚úÖ –ì–æ–≤–æ—Ä–µ–Ω–∏–µ\n\n"
        "üöÄ –¢–µ–ø–µ—Ä—å –≤—ã –≥–æ—Ç–æ–≤—ã –∫ –æ–±—â–µ–Ω–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –≤ IT —Å—Ä–µ–¥–µ!",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_final_keyboard())
    )
    
    await state.set_state(LessonStates.LESSON_COMPLETE)
    await callback.answer()

@router.callback_query(F.data == "continue_exercise")
async def continue_exercise_handler(callback: CallbackQuery, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π - fallback"""
    current_state = await state.get_state()
         
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: —Å–æ—Å—Ç–æ—è–Ω–∏–µ {current_state}")
    
    # –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ –õ–ï–ö–°–ò–ß–ï–°–ö–ò–• –°–û–°–¢–û–Ø–ù–ò–ô
    if current_state == LessonStates.LEXICAL_EN_TO_RU:
        print("[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º LEXICAL_EN_TO_RU –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∞–Ω–≥–ª–∏–π—Å–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π
        data = await state.get_data()
        current_index = data.get("current_lexical_en", 0)
        new_index = current_index + 1
        await state.update_data(current_lexical_en=new_index)
        
        print(f"[DEBUG] –£–≤–µ–ª–∏—á–∏–ª–∏ –∏–Ω–¥–µ–∫—Å —Å {current_index} –¥–æ {new_index}")
        
        try:
            await show_lexical_en_question(callback.message, state)
            print("[DEBUG] show_lexical_en_question —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–Ω–∞")
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ show_lexical_en_question: {e}")
            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.",
                reply_markup=get_keyboard_with_menu(get_main_menu_keyboard())
            )
        
        await callback.answer()
        return
        
    elif current_state == LessonStates.LEXICAL_RU_TO_EN:
        print("[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º LEXICAL_RU_TO_EN –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É —Ä—É—Å—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        data = await state.get_data()
        current_index = data.get("current_lexical_ru", 0)
        new_index = current_index + 1
        await state.update_data(current_lexical_ru=new_index)
        
        print(f"[DEBUG] –£–≤–µ–ª–∏—á–∏–ª–∏ –∏–Ω–¥–µ–∫—Å —Å {current_index} –¥–æ {new_index}")
        
        try:
            await show_lexical_ru_question(callback.message, state)
            print("[DEBUG] show_lexical_ru_question —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–Ω–∞")
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ show_lexical_ru_question: {e}")
            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.",
                reply_markup=get_keyboard_with_menu(get_main_menu_keyboard())
            )
        
        await callback.answer()
        return
         
    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await callback.message.edit_text(
        "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=get_keyboard_with_menu(get_main_menu_keyboard())
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ª–µ–∫—Å–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
@router.callback_query(F.data == "continue_lexical")
async def continue_lexical_exercise_fallback(callback: CallbackQuery, state: FSMContext):
    """Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–µ–∫—Å–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    current_state = await state.get_state()
    
    print(f"[DEBUG] FALLBACK —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {current_state}")
    
    if current_state == LessonStates.LEXICAL_EN_TO_RU:
        print("[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º EN->RU –≤ fallback")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∞–Ω–≥–ª–∏–π—Å–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π
        data = await state.get_data()
        current_index = data.get("current_lexical_en", 0)
        await state.update_data(current_lexical_en=current_index + 1)
        
        await show_lexical_en_question(callback.message, state)
        
    elif current_state == LessonStates.LEXICAL_RU_TO_EN:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É —Ä—É—Å—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        data = await state.get_data()
        current_index = data.get("current_lexical_ru", 0)
        await state.update_data(current_lexical_ru=current_index + 1)
        
        await show_lexical_ru_question(callback.message, state)
    
    else:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
        await callback.message.edit_text(
            "‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ª–µ–∫—Å–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö.\n\n"
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=get_keyboard_with_menu(get_main_menu_keyboard())
        )
    
    await callback.answer()


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
@router.callback_query(F.data.startswith("lexical_"))
async def handle_lexical_fallback(callback: CallbackQuery, state: FSMContext):
    """Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–µ–∫—Å–∏—á–µ—Å–∫–∏—Ö callback'–æ–≤"""
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ callback –ø—Ä–∏—à–µ–ª, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ
    if current_state not in [LessonStates.LEXICAL_EN_TO_RU, LessonStates.LEXICAL_RU_TO_EN]:
        await callback.message.edit_text(
            "‚ö†Ô∏è –≠—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n"
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–∫–∞–º.",
            reply_markup=get_keyboard_with_menu(get_main_menu_keyboard())
        )
        await callback.answer()
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π lexical callback: {callback.data} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")
    await callback.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑")


@router.callback_query(F.data.startswith("mchoice_"))
async def handle_mchoice_fallback(callback: CallbackQuery, state: FSMContext):
    """Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è mchoice callback'–æ–≤"""
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ callback –ø—Ä–∏—à–µ–ª, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ
    if current_state not in [LessonStates.MCHOICE_EXERCISE, LessonStates.LISTENING_CHOICE]:
        await callback.message.edit_text(
            "‚ö†Ô∏è –≠—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n"
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–∫–∞–º.",
            reply_markup=get_keyboard_with_menu(get_main_menu_keyboard())
        )
        await callback.answer()
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π mchoice callback: {callback.data} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")
    await callback.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑")


@router.callback_query(F.data.startswith("listening_"))
async def handle_listening_fallback(callback: CallbackQuery, state: FSMContext):
    """Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è listening callback'–æ–≤"""
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ callback –ø—Ä–∏—à–µ–ª, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ
    if current_state not in [LessonStates.LISTENING_TRUE_FALSE, LessonStates.LISTENING_CHOICE]:
        await callback.message.edit_text(
            "‚ö†Ô∏è –≠—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n"
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–∫–∞–º.",
            reply_markup=get_keyboard_with_menu(get_main_menu_keyboard())
        )
        await callback.answer()
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π listening callback: {callback.data} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")
    await callback.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑")


# Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö callback'–æ–≤
@router.callback_query()
async def handle_unknown_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö callback'–æ–≤"""
    print(f"–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π callback: {callback.data}")
    
    # –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π
    await callback.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.")


# Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
@router.message(F.text)
async def handle_unexpected_text(message: Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state not in [
        LessonStates.VERB_EXERCISE,
        LessonStates.GRAMMAR_QA,
        LessonStates.NEGATIVE_EXERCISE,
        LessonStates.QUESTION_EXERCISE,
        LessonStates.MISSING_WORD_EXERCISE # ‚Üê –î–æ–±–∞–≤–ª–µ–Ω–æ
    ]:
        await message.answer(
            "ü§î –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_keyboard_with_menu(get_main_menu_keyboard())
        )

# Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
@router.message(F.voice)
async def handle_unexpected_voice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –≥–¥–µ –µ–≥–æ –Ω–µ –∂–¥—É—Ç
    if current_state not in [LessonStates.PRONUNCIATION_RECORD, LessonStates.LISTENING_PHRASES_RECORD]:
        await message.answer(
            "üé§ –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
            "–î–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_keyboard_with_menu(get_main_menu_keyboard())
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_unexpected_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    current_state = await state.get_state()
    
    await message.answer(
        f"ü§∑‚Äç‚ôÇÔ∏è –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
        f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=get_keyboard_with_menu(get_main_menu_keyboard())
    )

